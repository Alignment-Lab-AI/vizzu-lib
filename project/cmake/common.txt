set(root ../../..)
set(sourceDir ${root}/src)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if (NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
endif()

option(clangtidy "Run clang-tidy analyzis" OFF)
option(clangformat "Run clang formatter" OFF)
option(cppcheck "Run cppcheck analyzis" OFF)
option(cpplint "Run cpplint analyzis" OFF)

if(clangtidy)
	set(CMAKE_CXX_CLANG_TIDY clang-tidy)
endif()

if (clangformat)
    set(CLANG_FORMAT_EXE clang-format-16)

    get_property(_allTargets GLOBAL PROPERTY GlobalTargetList)
    if (NOT _allTargets)
    message("ID: ${CMAKE_SOURCE_DIR}")
        add_custom_target(clang_format
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/../..
            COMMAND git ls-tree -r  --name-only @ > _files
            COMMAND sed -i -n "'/\\.\\(cpp\\|h\\|hpp\\|tpp\\)$$/p'" _files
            COMMAND ${CLANG_FORMAT_EXE} -i --Werror --files=_files
        )
        add_custom_command(TARGET clang_format POST_BUILD
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/../..
            COMMAND ${CMAKE_COMMAND} -E rm -f _files
        )
        macro(create_dependency _target)
            add_dependencies(${_target} clang_format)
        endmacro()
        macro(add_library _target)
            _add_library(${_target} ${ARGN})
            set_property(GLOBAL APPEND PROPERTY GlobalTargetList ${_target})
            if(NOT "${_target}" MATCHES "^Qt[0-9]*::")
                create_dependency(${_target})
            endif()
        endmacro()
        macro(add_executable _target)
            _add_executable(${_target} ${ARGN})
            set_property(GLOBAL APPEND PROPERTY GlobalTargetList ${_target})
            if(NOT "${_target}" MATCHES "^Qt[0-9]*::")
                create_dependency(${_target})
            endif()
        endmacro()
    endif()
endif()

if(cppcheck)
	set(CMAKE_CXX_CPPCHECK "cppcheck;--inline-suppr")
endif()

if (cpplint)
    set(CMAKE_CXX_CPPLINT "cpplint")
endif()

if (WIN32)
	set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} /std:c++20 /Zi /GR-")
	add_definitions(-D_USE_MATH_DEFINES)
	set(CMAKE_SHARED_LINKER_FLAGS "/INCREMENTAL:NO /Debug")
else()
	set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++20 \
		-Wpedantic \
		-Wall \
		-Wextra \
		-Werror \
		-Wzero-as-null-pointer-constant \
		-Wnon-virtual-dtor \
		-Wmissing-noreturn \
		-Wunreachable-code \
		-Wunused-macros \
		-Wold-style-cast \
	")
if (clang)
	set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} \
		-Wreserved-id-macro \
		-Winconsistent-missing-destructor-override \
		-Wunreachable-code-return \
		-Wshadow-uncaptured-local \
		-Wshadow-field-in-constructor \
	")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} \
		-Wno-restrict \
	")
endif()

endif()

